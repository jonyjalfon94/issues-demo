name: Create environment
on:
  issues:
    types:
      - opened
      - edited
    
  issue_comment:
    types:
      - created
      - edited
      - deleted

env: 
  CDK_APP_PATH: ./on-demand-env

jobs:
  create-environment:
    name: comment
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      issues: write
    steps:

      - uses: actions/checkout@v2

      - uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const issueBody = `${{ github.event.issue.body }}`;
            const prUrls = issueBody.match(/(http|https):\/\/[a-zA-Z0-9./?=_%:-]*/g).sort()

            // Create list of repo maps
            const repoData = [];
            prUrls.map( (url) => {
                repoData.push({
                    repo: url.split("/")[4],
                    owner: url.split("/")[3],
                    pr: url.split("/")[6]
                });
            });

            let commentBody = `This Pull request was referenced in a create environment issue.
            The environment is now being created.
            Once the environment is ready a new comment will be added to this PR with the details of the environment.
            
            In order to see the status of the environment, visit the following link: [workflow status](https://github.com/${{ github.repository }}/commit/${{ github.sha }}/checks)`;

            repoData.map( (repo) => {
                // Add deploying label to PR
                github.rest.issues.addLabels({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: repo.pr,
                    labels: ["provisioning env :hammer_and_wrench:"]
                });
                // Add comment in each PR
                github.rest.issues.createComment({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: repo.pr,
                    body: commentBody
                });

            });

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::434834777527:role/github-role-Role-10TMVRLENRLC1
          aws-region: eu-west-1
          role-skip-session-tagging: true

      # Install Node.js
      - name: Set up Node.js 
        uses: actions/setup-node@v2
        with:
          node-version: 16.x

      # Install cdk
      - name: Set up CDK
        run: |
          npm install -g aws-cdk

      # Install Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # Install Required Dependencies
      - name: Install dependencies
        working-directory: ${{ env.CDK_APP_PATH }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Get output of cdk diff
      - name: Get Diff
        working-directory: ${{ env.CDK_APP_PATH }}
        run: |
          cdk diff

      # Deploy all stacks
      - name: Deploy the application
        working-directory: ${{ env.CDK_APP_PATH }}
        run: cdk deploy --require-approval never --outputs-file outputs.json

      - uses: actions/github-script@v6
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          github-token: ${{ secrets.TOKEN }}
          script: |
            const issueBody = `${{ github.event.issue.body }}`;
            const prUrls = issueBody.match(/(http|https):\/\/[a-zA-Z0-9./?=_%:-]*/g).sort()
            const outputs = JSON.parse(fs.readFileSync('outputs.json', 'utf8'));

            // Create list of repo maps
            const repoData = [];
            prUrls.map( (url) => {
                repoData.push({
                    repo: url.split("/")[4],
                    owner: url.split("/")[3],
                    pr: url.split("/")[6]
                });
            });

            let commentBody = `The environment has been successfully created with the following details:
            \`\`\`json
            ${outputs}
            \`\`\`

            A label has been added to this PR that will indicate the workflow to trigger a deployment after each build.`;

            repoData.map( (repo) => {
                // Remove provision label from PR
                github.rest.issues.removeLabel({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: repo.pr,
                    name: "provisioning env :hammer_and_wrench:"
                });
                // Add deploy label to PR
                github.rest.issues.addLabels({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: repo.pr,
                    labels: ["deploy :rocket:"]
                });
                // Add comment in each PR
                github.rest.issues.createComment({
                    owner: repo.owner,
                    repo: repo.repo,
                    issue_number: repo.pr,
                    body: commentBody
                });
            });


